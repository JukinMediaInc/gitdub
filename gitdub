#!/usr/bin/env ruby

require 'fileutils'
require 'git'
require 'json'
require 'sinatra'
require 'yaml'

def which(cmd)
  ENV['PATH'].split(File::PATH_SEPARATOR).each do |path|
    exe = "#{path}/#{cmd}"
    return exe if File.executable?(exe)
  end
  nil
end

raise 'could not find git-notifier in $PATH' unless which('git-notifier')

if ARGV.size() != 1
  STDERR.puts "usage: #{$0} <config.yml>" unless ARGV.size() == 1
  exit 1
end

CONFIG = YAML.load_file(ARGV[0])

class GitNotifier
  STATE_FILE = '.git-notifier.dat'

  private

  MAPPINGS = {
    'from' => 'sender',
    'to' => 'mailinglist',
    'subject' => 'emailprefix'
  }

  public

  def self.run(path, opts)
    success = execute(path, Hash[opts.map { |k, v| [MAPPINGS[k] || k, v] }])
    STDERR.puts('git-notifier failed') unless success
    success
  end

  private

  def self.execute(path, args = [])
    args = args.map do |k, v|
      v = v * ',' if k == 'mailinglist'
      next unless v
      ["--#{k}"] + (!!v == v ? [] : ["#{v}"]) # Ignore non-boolean values.
    end
    current = Dir.pwd()
    Dir.chdir(path)
    success = system('git-notifier', *args.flatten.delete_if { |x| x.nil? })
    Dir.chdir(current)
    success
  end
end

class GitDub
  def initialize(config)
    @notifier = config['notifier']
    @github = config['github']
    @silent_init = config['gitdub']['silent_init']
  end

  def process(push)
    opts = @notifier
    user = push['repository']['owner']['name']
    repo = push['repository']['name']

    # Update the corresponding repository via git.
    dir = File.join(user, repo)
    if Dir.exists?(dir)
      if not Git.open(dir).pull()
        STDERR.puts("pull failed for #{dir}")
      end
    else
      STDERR.puts("cloning new repository into #{dir}")
      if not Git.clone("git@github.com:#{user}/#{repo}", dir)
        STDERR.puts("git failed to clone repository #{user}/#{repo}")
        FileUtils.rm_rf(dir) if File.exists?(dir)
      end
      # Do not keep empty user directories.
      if Dir[File.join(user, '*')].empty?
        Dir.rmdir(user)
      end
    end

    github_url = push['repository']['url']
    opts['link'] = "#{github_url}/compare/#{push['before']}...#{push['after']}"
    @github.each do |entry|
      if "#{user}\/#{repo}" =~ Regexp.new(entry['id'])
        opts.merge!(entry.reject { |k, v| k == 'id' })
        if not File.exists?(File.join(dir, GitNotifier::STATE_FILE))
          opts.merge!({updateonly: true})
          STDERR.puts('initializing git-notifier for new repository')
          return GitNotifier.run(dir, opts)
        end
        STDERR.puts("running git-notifier for #{user}/#{repo}")
        return GitNotifier.run(dir, opts)
      end
    end
  end
end

#
# Sinatra
#

configure do
  set(:port, CONFIG['gitdub']['port'])
  set(:bind, CONFIG['gitdub']['bind'])

  dir = CONFIG['gitdub']['directory']
  if dir != '.'
    STDERR.puts("switching directory to #{dir}")
    Dir.mkdir(dir) unless Dir.exists?(dir)
    Dir.chdir(dir)
  end

  $gitdub = GitDub.new(CONFIG)
end

get '/' do
  "Use #{request.url} as WebHook URL in your github repository settings."
end

post '/' do
  sources = CONFIG['gitdub']['allowed_sources']
  if not sources.empty? and not sources.include?(request.ip)
    STDERR.puts("discarding request from disallowed address #{request.ip}")
    return
  end

  $gitdub.process(JSON.parse(params[:payload]))
end
